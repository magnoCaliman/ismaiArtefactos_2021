* AULA 01.1 - 01/MAR

** Material
- Kit de componentes
  - https://mauser.pt/catalog/product_info.php?cPath=1667_2842&products_id=096-6785
- Arduino
  - https://mauser.pt/catalog/product_info.php?cPath=1667_2602_1668&products_id=096-2435
- Cabo USB tipo B - "cabo de impressora"
  - https://www.cmple.com/content/images/thumbs/usb-2-0-a-male-to-b-male-cable-6-feet-black_NID0011125.jpeg
  - *Não incluso no kit!*

- Obrigatoriedade de video no Teams
  - Webcam ou OBS.Ninja - https://obs.ninja/

** Horário para retirada no CITEI
- 02/03/2021 (3a-feira) - 14h00 às 16h00
- 03/03/2021 (4a-feira) - 16h30 às 18h00
* AULA 01.2 - 02/MAR

** Hardware Hacking && Circuit Bending
- Sesame Street - https://www.youtube.com/watch?v=ZAsDVb18MJ4
- Cat Piano - https://www.youtube.com/watch?v=dBB-pBIaieg
- Video Camera - https://www.youtube.com/watch?v=6fVqs3pxQHQ
- Game Boy - https://www.youtube.com/watch?v=FuxTNxym07s
- Nintendo - https://www.youtube.com/watch?v=kHMf14CHWHI

- Nicolas Collins - https://www.youtube.com/watch?v=TjbGSgCopNk
- Intro to Circuit Bending - https://www.youtube.com/watch?v=kJfTdD_5XyE
- Reed Ghazala - https://www.youtube.com/watch?v=KHDL9iGxDPM

** Eletrônica Básica
*** Conceitos
- Circuito
  - Dispositivos eletrônicos precisam, para funcionar, de um /circuito fechado/. Um circuito aberto é um circuito infeliz.
- Polaridade
  - Alguns componentes eletrônicos pressupõe que a eletricidade está a fluir em uma /direção específica/. Outros, nem tanto.
- Condutividade
  - Qualquer coisa é capaz de /conduzir eletricidade/ (até você). Mas certos materiais fazem isso melhor que outros.
  - 10.000 volts wood burning experiment - https://www.youtube.com/watch?v=PFMo5aicurc
- Tensão
  - Todo circuito espera uma "/quantidade/" certa de eletricidade fluindo entre os polos positivo e negativo. Por vezes, não há problemas em operar acima ou abaixo desse valor ideal (um engenheiro vai te dizer o contrário...)
  - Exploding electronic components in HD - https://www.youtube.com/watch?v=JCPXckfT-6g
* AULA 02.1 - 08/MAR
- Continuação discussão Aula 01.2

* AULA 02.2 - 09/MAR
** 1. O que é?
  - https://www.arduino.cc/

Ecossistema (circuito + linguagem de programação + IDE) que nos permite criar lógicas computacionais para interfacear/controlar hardware e software.

- O que dá para fazer?
  - Coin slot detector: https://www.instructables.com/id/coin-slot-detector/
  - Geiger counter: https://www.cooking-hacks.com/documentation/tutorials/geiger-counter-radiation-sensor-board-arduino-raspberry-pi-tutorial
  - Beat slicer: https://vimeo.com/45422593 / https://vimeo.com/48347752
  - Cabinet of Curiosness: https://youtu.be/JCiXV6b7N0A
  - Et cetera - https://www.instructables.com/howto/arduino/

Plataforma open source. Você pode montar o seu em casa (e vender!) e isso nada tem de ilegal.

** 2. Instalação
 - Baixar nesse link: https://www.arduino.cc/en/software
 - *NÃO* usar a versão "ZIP file", e sim o instalador, conforme instruções no [[https://www.arduino.cc/en/Guide/Windows][guia de instalação]]:

#+begin_quote
 Get the latest version from the download page. You can choose between the Installer (.exe) and the Zip packages. *We suggest you use the first one that installs directly everything you need to use the Arduino Software (IDE), including the drivers*. With the Zip package you need to install the drivers manually.
#+end_quote

** 3. Blink
1. Abra uma janela nova da IDE do Arduino, delete tudo que lá está, copie e cole o código abaixo
2. Selecione a placa e porta corretas em ~Tools -> Board~ e ~Tools -> Port~
   1. Placa? Porta? 
3. Salve o arquivo
4. Faça upload
   1. Upload para onde?

*** 3.1 Código
#+begin_src c
int pinoLed = 13;

void setup()
{
  pinMode(pinoLed, OUTPUT);
}

void loop()
{
  digitalWrite(pinoLed, HIGH);
  delay(1000);
  digitalWrite(pinoLed, LOW);
  delay(500);  
} 
#+end_src

*** 3.2 Comentários
- Estrutura de pastas
- Convenção de nomenclatura
- Onde está o circuito?

*** 3.3 Modificações
- Que estruturas de código és capaz de reconhecer nesse exemplo?
- O que é possível de modificar, sem alterar o circuito?

** 4. Anotações das últimas duas aulas:

[[./assets/aula02_1-notas.png]]
* AULA 03.1 - 15/MAR
** 1.1 Vocabulário de Blink
- ~int~
- ~=~
- ~void setup(){}~
- ~void loop(){}~
- ~pinMode()~
  - ~OUTPUT~
- ~digitalWrite()~
  - ~HIGH~ / ~LOW~
- ~delay()~

*** 1.2 Documentação
 - Regra #0 em programação: RTFM
   - https://www.arduino.cc/reference/en/

** 2. Comentários
- Para /escrita/ de pinos, eles podem ser encarados como mini-fichas de 5V (no Arduino UNO), controladas via código.
#+begin_quote
When reading or writing to a digital pin there are only two possible values a pin can take/be-set-to: ~HIGH~ and ~LOW~.\\
Defining Pin Levels: HIGH and LOW - https://www.arduino.cc/reference/en/language/variables/constants/constants/
#+end_quote

* AULA 03.2 - 16/MAR
** 1. Protoboard
- Ex.1
  - Energia elétrica flui na horizontal por entre as linhas superiores e inferiores, e na vertical por entre as colunas.
  - Topo e fundo *não* estão conectados entre sí!
[[./assets/aula03_2-ex1.png]]

- Ex.2
  - Código "Blink" da aula passada, agora no pino 7
  - Por que não resulta?
[[./assets/aula03_2-ex2.png]]
** 2. Componentes
*** 2.1 LED
- Light Emiting Diode
- Precisa de ~2V (varia de acordo com o [[https://www.circuitbread.com/ee-faq/the-forward-voltages-of-different-leds][material e a cor]]).
- Polarizado: recebe tensão na perna maior ("/anodo/"), e conecta GND na perna menor ("/catodo/").
*** 2.2 Resistor
- Diminui a quantidade de tensão no circuito. Faz LED sobreviver bateria de 9V!
- Valor medido em Ω (ohms). Quanto maior o valor, maior a resistência elétrica. Vossos kits possuem resistências de 220Ω, 1KΩ e 10KΩ.
- Não polarizado.
- Calcular o valor exato de resistência necessária, no nosso caso, não será tão importante.
  - Para os interessados: [[https://www.fluke.com/en-us/learn/blog/electrical/what-is-ohms-law][Lei de Ohms]]

- Ex.3
[[./assets/aula03_2-ex3.png]]

** 3. Blink (certo!) na protoboard
- Ex.4
[[./assets/aula03_2-ex4.png]]
** 4. Ground compartilhado
- Muitas vezes vários componentes do circuito /compartilham o mesmo ground/. Ou seja, o negativo da nossa alimentação de energia (pino GND do Arduino) está conectado em vários lugares /ao mesmo tempo/.
- Ex.5
*** Código
#+begin_src c
int pinoLed_R1 = 7;
int pinoLed_R2 = 8;

void setup()
{
  pinMode(pinoLed_R1, OUTPUT);
  pinMode(pinoLed_R2, OUTPUT);
}

void loop()
{
  digitalWrite(pinoLed_R1, HIGH);
  digitalWrite(pinoLed_R2, HIGH);
  delay(1000);
  digitalWrite(pinoLed_R1, LOW);
  digitalWrite(pinoLed_R2, LOW);
  delay(500);
} 
#+end_src
*** Circuito
[[./assets/aula03_2-ex5.png]]
** 5. TPC
Construir circuito na protoboard e implementar código para reproduzir os comportamentos demonstrados abaixo:
*** 5.1 - alternaPisca
[[./assets/aula03_2-tpc1.gif]]
*** 5.2 - linhaLed
[[./assets/aula03_2-tpc2.gif]]
- Obs: para esse segundo TPC, é necessário o uso de duas estruturas computacionais já estudadas em outros semestres: arrays e loops ~for~. Consulte a documentação do Arduino para saber as sintaxes corretas (algumas são idênticas ao Processing...)
- Data de entrega - 23/03
*** 5.3 - Formatos de entrega
- Upload na opção "Entrega de trabalhos" do portal. 
- Arquivo do código, com comentários ao topo especificando a qual aula exercício se refere, e contendo link de YouTube para video de demonstração do circuito a funcionar:

#+begin_src c
//AULA 02 - BLINK
//https://www.youtube.com/watch?v=dQw4w9WgXcQ

int pinoLed = 13;

void setup()
{
  pinMode(pinoLed, OUTPUT);
}

void loop()
{
  digitalWrite(pinoLed, HIGH);
  delay(1000);
  digitalWrite(pinoLed, LOW);
  delay(500);  
} 
#+end_src
* AULA 04.1 - 22/MAR
- Dúvidas TPC da aula 03.2
- Reforçar: formato de entrega é via upload do *arquivo* de código.
* AULA 04.2 - 23/MAR
** 1. Piezo buzzer
- Cristal piezo-elétrico
  - Piezoelectricity - why hitting crystals makes electricity - https://www.youtube.com/watch?v=wcJXA8IqYl8
  - DIY contact mic - https://www.youtube.com/watch?v=aOJuCYgmPPE
- Polarizado (mas não liga muito pra isso...)
*** 1.1 Ativo vs. passivo
- Experimente o seguinte circuito, usando o sketch /Blink/, com os dois diferentes buzzers contidos no kit:
  - Obs: por razão de simplicidade, a protoboard não está demonstrada no gráfico. Mas é necessária para a construção.
[[./assets/aula04_1-ex1.png]]
- Qual a diferença de comportamento?
** 2. ~tone()~
- Ex.1
#+begin_src c
int pinoPiezzo = 5;

void setup()
{
  pinMode(pinoPiezzo, OUTPUT);
}

void loop()
{
  tone(pinoPiezzo, 200);
}
#+end_src

- Ex.2 - agora vários sons em sequência
#+begin_src c
int pinoPiezzo = 5;
int duracaoSom = 90;
int tempoPausa = 100;

void setup()
{
  pinMode(pinoPiezzo, OUTPUT);
}

void loop()
{
  tone(pinoPiezzo, 100, duracaoSom);
  delay(tempoPausa);
  tone(pinoPiezzo, 200, duracaoSom);
  delay(tempoPausa);
  tone(pinoPiezzo, 300, duracaoSom);
  delay(tempoPausa);
  tone(pinoPiezzo, 400, duracaoSom);
  delay(tempoPausa);
}
#+end_src

- Que valores de frequência escolher?
  - Razões perfeitas (dobro, metade, 1/3, etc)
  - Progressões geométricas e/ou aritméticas
  - Notas musicas: https://pages.mtu.edu/~suits/notefreqs.html
  - [[https://www.arduino.cc/reference/en/language/functions/random-numbers/random/][Qualquer um...]]

** 3. TPC
*** 3.1 - strangerThings
- Ouça [[https://www.youtube.com/watch?v=-RcPZdihrp4][essa música]]. Sabendo que a frequência em Hertz das notas que compõe a melodia principal são ~{130, 164, 196, 246, 260, 246, 196, 164}~, crie circuito usando o buzzer e a função ~tone()~ que reproduza essa melodia.
*** 3.2 - soundLight
- Experimente livremente com os conceitos até aqui vistos, e crie circuito que propõe integração entre luz e som.
- Data de entrega de ambos TPC: 05/04
* AULA 05.1 - 06/ABR
** 1. Estrutura de controle ~for()~
- Da [[https://www.arduino.cc/reference/en/language/structure/control-structure/for/][documentação]]:
  - "The ~for~ statement is used to repeat a block of statements enclosed in curly braces"

- Sintaxe:
#+begin_src c
for (initialization; condition; increment) {
  // statement(s);
}
#+end_src

- Maneira simples de entender o ~for~: uma /condicional repetível/. Uma amálgama de ~if()~ com ~void loop()~

*** Ex.1:
- 3 leds ligados aos pinos 9, 10 e 11
  - Obs.: não esquecer do resistor!

- Versão sem ~for~:
#+begin_src c
int pinoLed_R1 = 9;
int pinoLed_R2 = 10;
int pinoLed_R3 = 11;
int tempoDelay = 500;

void setup() 
{
  pinMode(pinoLed_R1, OUTPUT);
  pinMode(pinoLed_R2, OUTPUT);
  pinMode(pinoLed_R3, OUTPUT);
}

void loop() 
{
  digitalWrite(pinoLed_R1, HIGH);
  delay(tempoDelay);
  digitalWrite(pinoLed_R1, LOW);
  digitalWrite(pinoLed_R2, HIGH);
  delay(tempoDelay);
  digitalWrite(pinoLed_R2, LOW);
  digitalWrite(pinoLed_R3, HIGH);
  delay(tempoDelay);
  digitalWrite(pinoLed_R3,LOW);
}
#+end_src

- Versão com ~for~:
#+begin_src c
int tempoDelay = 500;

void setup()
{
  for (int i = 9; i <= 11; i = i + 1)
  {
    pinMode(i, OUTPUT);
  }
}

void loop()
{ 
  for (int i = 9; i <= 11; i = i + 1)
  {
    digitalWrite(i, HIGH);
    delay(tempoDelay);
    digitalWrite(i, LOW);
  }
}
#+end_src

- Perguntas:
  - É permitido declarar a variável ~int i = 0~ duas vezes (linhas 5 e 13)?
  - Por que após o led do pino 11 acender, o processo se repete? Qual a relação disso com o valor da variável ~i~?
  - E se quiséssemos usar pinos não adjacentes? Por exemplo, pinos 3, 5 e 6?

** 2. Arrays
- Da [[https://www.arduino.cc/reference/en/language/variables/data-types/array/][documentação]]:
  - "An array is a collection of variables that are accessed with an index number"

- Sintaxe
  - Linguagens diferentes vão ter diferentes sintaxes. Mesmo dentro da mesma linguagem, diferentes métodos às vezes podem ser usados.
  - Declaração de um array que contém números inteiros:
#+begin_src c
int minhaListaDeNumeros[] = {2, 5, 99, 420, 666, 1234};
#+end_src

- Maneira simples de entender um array: um /tipo de variável/ ("data type") que contém uma /lista/ de diversos itens. Cada item pode ser acessado individualmente de acordo com sua /posição/ na lista ("index number").

*** Ex.2 (no Processing!):
#+begin_src c
int minhaListaDeNumeros[] = {3, 5, 99, 420, 666, 1234};

//retorna o item do array na posição (index) 2
println(minhaListaDeNumeros[2]);
#+end_src

- Da documentação: "Arrays are zero indexed"
  - ~minhaListaDeNumeros[0] == 3~
  - ~minhaListaDeNumeros[1] == 5~
  - ~minhaListaDeNumeros[2] == 99~
  - etc...

- Perguntas:
  - Quantos itens possui a o array ~minhaListaDeNumeros~?
  - Qual o index do item ~1234~?

*** Ex.3 (no Arduino):
- Refactorar o Exemplo 01, agora usando arrays + ~for~

#+begin_src c
int listaPinos[] = {9, 10, 11};
int tempoDelay = 500;

void setup()
{
  Serial.begin(9600);
  for (int i = 0; i < 3; i = i + 1)
  {
    pinMode(listaPinos[i], OUTPUT);  
  }  
}

void loop()
{
  for (int i = 0; i < 3; i = i + 1)
  {
    digitalWrite(listaPinos[i], HIGH);
    delay(tempoDelay);
    digitalWrite(listaPinos[i], LOW);
  }
}
#+end_src

*** Ex.4:
- 6 leds ligados aos pinos 3, 5, 6, 9, 10 e 11.
- Usando variável para indicar a quantidade de itens na lista (como no [[https://www.arduino.cc/en/Tutorial/KnightRider][exemplo da documentação]]).

#+begin_src c
int listaPinos[] = {3, 5, 6, 9, 10, 11};
int tempoDelay = 500;
int quantItensLista = 6;

void setup()
{
  for (int i = 0; i < quantItensLista; i = i + 1)
  {
    pinMode(listaPinos[i], OUTPUT);  
  }  
}

void loop()
{
  for (int i = 0; i < quantItensLista; i = i + 1)
  {
    digitalWrite(listaPinos[i], HIGH);
    delay(tempoDelay);
    digitalWrite(listaPinos[i], LOW);
  }
}
#+end_src

* AULA 06.1 - 12/ABR
- Continuação assunto aula 05.1
* AULA 06.2 - 13/ABR
** 1. ~random()~

- Relembrando o /princípio de modularidade/ que torna linguagens de programação tão poderosas: *funções podem ser argumentos de outras funções*!
  - Outra maneira de pensar: funções (às vezes) /retornam valores/ que podem ser utilizados por outras funções.

- Ex.1 - Piezo conectado ao pino 2.
  - Valor randômico de frequência a cada repetição do ~void loop()~
  - ~random(100, 500)~ como segundo argumento da função ~tone()~. ~random()~ gera um valor, e /retorna/ esse valor para ~tone()~.
#+BEGIN_SRC c
int pinoPiezo = 2;
int tempoDelay = 150;

void setup()
{
  pinMode(pinoPiezo, OUTPUT);
}

void loop()
{
  tone(pinoPiezo, random(100, 500), 80);
  delay(tempoDelay);
}
#+END_SRC

- Ex.2 - Piezo conectado ao pino 2.
  - Mesmo resultado do Ex.1, mas agora mais organizado, com valor guardado em uma variável. Atenção para os momentos diferentes de /declaração/ (linha 3) e /atribuição/ (linha 12).
#+begin_src c
int pinoPiezo = 2;
int tempoDelay = 150;
int freqRandomica;

void setup()
{
  pinMode(pinoPiezo, OUTPUT);
}

void loop()
{
  freqRandomica = random(100, 500);
  
  tone(pinoPiezo, freqRandomica, 80);
  delay(tempoDelay);
}
#+end_src

- Ex.3 - Piezo conectado ao pino 2.
  - Pergunta: por quê o mesmo som é repetido 3 vezes? Qual a relação disso com a função ~random()~?
#+begin_src c
int pinoPiezo = 2;
int tempoDelay = 150;
int quantRepeticoes = 3;
int freqRandomica;

void setup()
{
  pinMode(pinoPiezo, OUTPUT);
}

void loop()
{
  freqRandomica = random(100, 500);

  for (int i = 0; i < quantRepeticoes; i = i + 1)
  {
    tone(pinoPiezo, freqRandomica, 80);
    delay(tempoDelay);
  }
}
#+end_src

- Ex.4 - Piezo conectado ao pino 2.
  - Selecionando item randomico em uma lista
#+begin_src c
int pinoPiezo = 2;
int listaFrequencias[] = {100, 200, 300, 400, 350};
int tamListaFreq = 5;
int listaTemposDelay[] = {125, 250, 500};

void setup()
{
  pinMode(pinoPiezo, OUTPUT);
}

void loop()
{
  for (int i = 0; i < tamListaFreq; i++)
  {
    tone(pinoPiezo, listaFrequencias[i], 90);
    delay(listaTemposDelay[random(3)]);
  }
}
#+end_src

- Detalhe importante da documentação do ~random()~
  - Parameters
    - ~min~: lower bound of the random value, *inclusive (optional)*.
    - ~max~: upper bound of the random value, *exclusive* .

** 2. Comunicação Serial
- No Ex.2 temos ~freqRandomica = random(100, 500)~. Perguntas:
  - /Onde/ fisicamente esse número está sendo gerado?
  - Como podemos ver esse valor?

- Documentação: https://www.arduino.cc/reference/en/language/functions/communication/serial/
  - "Used for communication between the Arduino board and a computer or other devices"
  - /Serial/ significando "em série", /um valor de cada vez/. 

- Agora uma coleção de várias funções com o /mesmo prefixo/ são utilizadas: ~Serial.begin()~, ~Serial.println()~, entre outras.
  - Atenção para a sintaxe de "dot notation": ~prefixo.funcao()~

- Ex.5 - Arduino conectado ao computador
  - Monitorando a porta serial através do menu ~Tools -> Serial Monitor~
#+BEGIN_SRC c
int valorRandomico;

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  valorRandomico = random(100, 500);

  Serial.print("O numero sorteado foi: ");
  Serial.println(valorRandomico);

  delay(1000);
}
#+END_SRC

- Ex.6 - Piezo conectado ao pino 2.
  - Como Ex.2. Valor randômico de frequência a cada repetição do ~void loop()~, mas agora podendo visualizar esses valores.
#+BEGIN_SRC c
int pinoPiezo = 2;
int tempoDelay = 500;
int freqRandomica;

void setup()
{
  Serial.begin(9600);
  pinMode(pinoPiezo, OUTPUT);
}

void loop()
{
  freqRandomica = random(100, 500);
  
  tone(pinoPiezo, freqRandomica, 80);
  delay(tempoDelay);

  Serial.println(freqRandomica);
}
#+END_SRC

** 3. TPC
- Data de entrega: 19/04
*** 3.1 - linhaLed_repeticao
[[./assets/aula06_2-tpc1.gif]]
- Em uma lista de 9 leds, selecionar randomicamente um led, e piscar 3 vezes.
*** 3.2 - sequenciador
- Experimente livremente com piezo, criando listas de frequências, durações e delays, fazendo uso de seleções randômicas nessas listas.
* AULA 07.1 - 19/ABR
** 1. ~digitalRead()~
- Documentação: https://www.arduino.cc/reference/en/language/functions/digital-io/digitalread/

- Ex.1 - digitalRead
[[./assets/aula07_1-ex1.png]]
#+BEGIN_SRC c
void setup()
{
  pinMode(5, INPUT);
  Serial.begin(9600);
}

void loop()
{
  Serial.println(digitalRead(5));
  
  delay(1000);
}
#+END_SRC

- /Experimento: imprima no monitor serial a leitura de dois pinos, onde um está conectado à 5V, e outro não está conectado à nada. Qual a diferença de leitura?/ 

- Ex.2 - leituraBotao
[[./assets/aula07_1-ex2.png]]
#+BEGIN_SRC c
int pinoBotao = 2;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  Serial.println(estadoBotao);
  delay(100);
}
#+END_SRC

- Ao usar ~Serial.println()~, é sempre importante utilizar um ~delay()~ de alguns millisegundos para não sobrecarregar a leitura do monitor serial.

** 2. ~if()~

- Faz um teste /booleano/ e /condiciona/ a execução de um bloco de código à esse teste.

#+BEGIN_SRC c
if (teste)
{
  //bloco de código que é avaliado se 
  //a condição do teste for verdadeira
}
#+END_SRC

- Ex.3 - ligaLed_botao
[[./assets/aula07_1-ex3.png]]
#+BEGIN_SRC c
int pinoBotao = 2;
int pinoLed = 9;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  pinMode(pinoLed, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  if (estadoBotao == 1)
  {
    digitalWrite(pinoLed, HIGH);
  }
//  else
//  {
//  	digitalWrite(pinoLed, LOW);
//  }
  
  Serial.println(estadoBotao);
  delay(50);
}
#+END_SRC

- Lembrando os operadores de comparação:
#+BEGIN_SRC c
x == y (x is equal to y)
x != y (x is not equal to y)
x <  y (x is less than y)
x >  y (x is greater than y)
x <= y (x is less than or equal to y)
x >= y (x is greater than or equal to y)
#+END_SRC
Referência: https://www.arduino.cc/reference/en/language/structure/control-structure/if/

- Ex.4 - Contador
[[./assets/aula07_1-ex2.png]]
#+BEGIN_SRC c
int pinoBotao = 2;
int contador = 0;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  if (estadoBotao == HIGH)
  {
    contador = contador + 1;
  }
  
  Serial.println(contador);  
  delay(100);
}
#+END_SRC

** 3. TPC
- Data de entrega: 26/04
*** 3.1 - led
- Crie um circuito onde um LED possui um timer de desligamento: ao apertar um botão o LED acende, e após 3 segundos, desliga.

*** 3.2 - piano
- Usando buzzer e cinco botões, crie um pequeno piano, onde cada botão produz um som diferente.

*** 3.3 - linhaLed_velocidade
- Ao TPC 5.2 da aula 03.2, adicione dois botões que, ao serem pressionados, podem aumentar e diminuir a velocidade da animação dos leds.

*** 3.4 - Desafio extra
- Crie um circuito onde ao apertar um botão um LED acende /e permanece acesso/, e ao apertar de novo, o LED apague.
